/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.test.thrift;

import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Generated;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked" })
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-07-01")
public class OrderAddressItem implements org.apache.thrift.TBase<OrderAddressItem, OrderAddressItem._Fields>,
		java.io.Serializable, Cloneable, Comparable<OrderAddressItem> {
	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
			"OrderAddressItem");

	private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id",
			org.apache.thrift.protocol.TType.I32, (short) 1);
	private static final org.apache.thrift.protocol.TField ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"order_id", org.apache.thrift.protocol.TType.I32, (short) 2);
	private static final org.apache.thrift.protocol.TField ZONE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"zone_id", org.apache.thrift.protocol.TType.I32, (short) 3);
	private static final org.apache.thrift.protocol.TField STREET_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"street", org.apache.thrift.protocol.TType.STRING, (short) 4);
	private static final org.apache.thrift.protocol.TField CONSIGNEE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"consignee", org.apache.thrift.protocol.TType.STRING, (short) 5);
	private static final org.apache.thrift.protocol.TField PHONE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"phone", org.apache.thrift.protocol.TType.STRING, (short) 6);
	private static final org.apache.thrift.protocol.TField WEIXIN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"weixin_id", org.apache.thrift.protocol.TType.STRING, (short) 7);
	private static final org.apache.thrift.protocol.TField ARCHIVE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"archive", org.apache.thrift.protocol.TType.BOOL, (short) 8);
	private static final org.apache.thrift.protocol.TField CREATED_AT_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"created_at", org.apache.thrift.protocol.TType.I32, (short) 9);
	private static final org.apache.thrift.protocol.TField UPDATED_AT_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"updated_at", org.apache.thrift.protocol.TType.I32, (short) 10);
	private static final org.apache.thrift.protocol.TField ID_CARD_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"id_card", org.apache.thrift.protocol.TType.STRING, (short) 11);

	private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

	static {
		schemes.put(StandardScheme.class, new OrderAddressItemStandardSchemeFactory());
		schemes.put(TupleScheme.class, new OrderAddressItemTupleSchemeFactory());
	}

	public int id; // required
	public int order_id; // required
	public int zone_id; // required
	public String street; // required
	public String consignee; // required
	public String phone; // required
	public String weixin_id; // required
	public boolean archive; // required
	public int created_at; // required
	public int updated_at; // required
	public String id_card; // required

	/**
	 * The set of fields this struct contains, along with convenience methods
	 * for finding and manipulating them.
	 */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {
		ID((short) 1, "id"), ORDER_ID((short) 2, "order_id"), ZONE_ID((short) 3, "zone_id"), STREET((short) 4,
				"street"), CONSIGNEE((short) 5, "consignee"), PHONE((short) 6, "phone"), WEIXIN_ID((short) 7,
						"weixin_id"), ARCHIVE((short) 8, "archive"), CREATED_AT((short) 9,
								"created_at"), UPDATED_AT((short) 10, "updated_at"), ID_CARD((short) 11, "id_card");

		private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

		static {
			for (_Fields field : EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not
		 * found.
		 */
		public static _Fields findByThriftId(int fieldId) {
			switch (fieldId) {
			case 1: // ID
				return ID;
			case 2: // ORDER_ID
				return ORDER_ID;
			case 3: // ZONE_ID
				return ZONE_ID;
			case 4: // STREET
				return STREET;
			case 5: // CONSIGNEE
				return CONSIGNEE;
			case 6: // PHONE
				return PHONE;
			case 7: // WEIXIN_ID
				return WEIXIN_ID;
			case 8: // ARCHIVE
				return ARCHIVE;
			case 9: // CREATED_AT
				return CREATED_AT;
			case 10: // UPDATED_AT
				return UPDATED_AT;
			case 11: // ID_CARD
				return ID_CARD;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception
		 * if it is not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not
		 * found.
		 */
		public static _Fields findByName(String name) {
			return byName.get(name);
		}

		private final short _thriftId;
		private final String _fieldName;

		_Fields(short thriftId, String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public String getFieldName() {
			return _fieldName;
		}
	}

	// isset id assignments
	private static final int __ID_ISSET_ID = 0;
	private static final int __ORDER_ID_ISSET_ID = 1;
	private static final int __ZONE_ID_ISSET_ID = 2;
	private static final int __ARCHIVE_ISSET_ID = 3;
	private static final int __CREATED_AT_ISSET_ID = 4;
	private static final int __UPDATED_AT_ISSET_ID = 5;
	private byte __isset_bitfield = 0;
	public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

	static {
		Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
				_Fields.class);
		tmpMap.put(_Fields.ID,
				new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.ORDER_ID,
				new org.apache.thrift.meta_data.FieldMetaData("order_id",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.ZONE_ID,
				new org.apache.thrift.meta_data.FieldMetaData("zone_id",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.STREET,
				new org.apache.thrift.meta_data.FieldMetaData("street", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.CONSIGNEE,
				new org.apache.thrift.meta_data.FieldMetaData("consignee",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.PHONE,
				new org.apache.thrift.meta_data.FieldMetaData("phone", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.WEIXIN_ID,
				new org.apache.thrift.meta_data.FieldMetaData("weixin_id",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.ARCHIVE,
				new org.apache.thrift.meta_data.FieldMetaData("archive",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
		tmpMap.put(_Fields.CREATED_AT,
				new org.apache.thrift.meta_data.FieldMetaData("created_at",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.UPDATED_AT,
				new org.apache.thrift.meta_data.FieldMetaData("updated_at",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.ID_CARD,
				new org.apache.thrift.meta_data.FieldMetaData("id_card",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		metaDataMap = Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(OrderAddressItem.class, metaDataMap);
	}

	public OrderAddressItem() {
	}

	public OrderAddressItem(int id, int order_id, int zone_id, String street, String consignee, String phone,
			String weixin_id, boolean archive, int created_at, int updated_at, String id_card) {
		this();
		this.id = id;
		setIdIsSet(true);
		this.order_id = order_id;
		setOrder_idIsSet(true);
		this.zone_id = zone_id;
		setZone_idIsSet(true);
		this.street = street;
		this.consignee = consignee;
		this.phone = phone;
		this.weixin_id = weixin_id;
		this.archive = archive;
		setArchiveIsSet(true);
		this.created_at = created_at;
		setCreated_atIsSet(true);
		this.updated_at = updated_at;
		setUpdated_atIsSet(true);
		this.id_card = id_card;
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public OrderAddressItem(OrderAddressItem other) {
		__isset_bitfield = other.__isset_bitfield;
		this.id = other.id;
		this.order_id = other.order_id;
		this.zone_id = other.zone_id;
		if (other.isSetStreet()) {
			this.street = other.street;
		}
		if (other.isSetConsignee()) {
			this.consignee = other.consignee;
		}
		if (other.isSetPhone()) {
			this.phone = other.phone;
		}
		if (other.isSetWeixin_id()) {
			this.weixin_id = other.weixin_id;
		}
		this.archive = other.archive;
		this.created_at = other.created_at;
		this.updated_at = other.updated_at;
		if (other.isSetId_card()) {
			this.id_card = other.id_card;
		}
	}

	public OrderAddressItem deepCopy() {
		return new OrderAddressItem(this);
	}

	public void clear() {
		setIdIsSet(false);
		this.id = 0;
		setOrder_idIsSet(false);
		this.order_id = 0;
		setZone_idIsSet(false);
		this.zone_id = 0;
		this.street = null;
		this.consignee = null;
		this.phone = null;
		this.weixin_id = null;
		setArchiveIsSet(false);
		this.archive = false;
		setCreated_atIsSet(false);
		this.created_at = 0;
		setUpdated_atIsSet(false);
		this.updated_at = 0;
		this.id_card = null;
	}

	public int getId() {
		return this.id;
	}

	public OrderAddressItem setId(int id) {
		this.id = id;
		setIdIsSet(true);
		return this;
	}

	public void unsetId() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
	}

	/**
	 * Returns true if field id is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetId() {
		return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
	}

	public void setIdIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
	}

	public int getOrder_id() {
		return this.order_id;
	}

	public OrderAddressItem setOrder_id(int order_id) {
		this.order_id = order_id;
		setOrder_idIsSet(true);
		return this;
	}

	public void unsetOrder_id() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORDER_ID_ISSET_ID);
	}

	/**
	 * Returns true if field order_id is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetOrder_id() {
		return EncodingUtils.testBit(__isset_bitfield, __ORDER_ID_ISSET_ID);
	}

	public void setOrder_idIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORDER_ID_ISSET_ID, value);
	}

	public int getZone_id() {
		return this.zone_id;
	}

	public OrderAddressItem setZone_id(int zone_id) {
		this.zone_id = zone_id;
		setZone_idIsSet(true);
		return this;
	}

	public void unsetZone_id() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ZONE_ID_ISSET_ID);
	}

	/**
	 * Returns true if field zone_id is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetZone_id() {
		return EncodingUtils.testBit(__isset_bitfield, __ZONE_ID_ISSET_ID);
	}

	public void setZone_idIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ZONE_ID_ISSET_ID, value);
	}

	public String getStreet() {
		return this.street;
	}

	public OrderAddressItem setStreet(String street) {
		this.street = street;
		return this;
	}

	public void unsetStreet() {
		this.street = null;
	}

	/**
	 * Returns true if field street is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetStreet() {
		return this.street != null;
	}

	public void setStreetIsSet(boolean value) {
		if (!value) {
			this.street = null;
		}
	}

	public String getConsignee() {
		return this.consignee;
	}

	public OrderAddressItem setConsignee(String consignee) {
		this.consignee = consignee;
		return this;
	}

	public void unsetConsignee() {
		this.consignee = null;
	}

	/**
	 * Returns true if field consignee is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetConsignee() {
		return this.consignee != null;
	}

	public void setConsigneeIsSet(boolean value) {
		if (!value) {
			this.consignee = null;
		}
	}

	public String getPhone() {
		return this.phone;
	}

	public OrderAddressItem setPhone(String phone) {
		this.phone = phone;
		return this;
	}

	public void unsetPhone() {
		this.phone = null;
	}

	/**
	 * Returns true if field phone is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetPhone() {
		return this.phone != null;
	}

	public void setPhoneIsSet(boolean value) {
		if (!value) {
			this.phone = null;
		}
	}

	public String getWeixin_id() {
		return this.weixin_id;
	}

	public OrderAddressItem setWeixin_id(String weixin_id) {
		this.weixin_id = weixin_id;
		return this;
	}

	public void unsetWeixin_id() {
		this.weixin_id = null;
	}

	/**
	 * Returns true if field weixin_id is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetWeixin_id() {
		return this.weixin_id != null;
	}

	public void setWeixin_idIsSet(boolean value) {
		if (!value) {
			this.weixin_id = null;
		}
	}

	public boolean isArchive() {
		return this.archive;
	}

	public OrderAddressItem setArchive(boolean archive) {
		this.archive = archive;
		setArchiveIsSet(true);
		return this;
	}

	public void unsetArchive() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ARCHIVE_ISSET_ID);
	}

	/**
	 * Returns true if field archive is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetArchive() {
		return EncodingUtils.testBit(__isset_bitfield, __ARCHIVE_ISSET_ID);
	}

	public void setArchiveIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ARCHIVE_ISSET_ID, value);
	}

	public int getCreated_at() {
		return this.created_at;
	}

	public OrderAddressItem setCreated_at(int created_at) {
		this.created_at = created_at;
		setCreated_atIsSet(true);
		return this;
	}

	public void unsetCreated_at() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATED_AT_ISSET_ID);
	}

	/**
	 * Returns true if field created_at is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetCreated_at() {
		return EncodingUtils.testBit(__isset_bitfield, __CREATED_AT_ISSET_ID);
	}

	public void setCreated_atIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATED_AT_ISSET_ID, value);
	}

	public int getUpdated_at() {
		return this.updated_at;
	}

	public OrderAddressItem setUpdated_at(int updated_at) {
		this.updated_at = updated_at;
		setUpdated_atIsSet(true);
		return this;
	}

	public void unsetUpdated_at() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPDATED_AT_ISSET_ID);
	}

	/**
	 * Returns true if field updated_at is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetUpdated_at() {
		return EncodingUtils.testBit(__isset_bitfield, __UPDATED_AT_ISSET_ID);
	}

	public void setUpdated_atIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPDATED_AT_ISSET_ID, value);
	}

	public String getId_card() {
		return this.id_card;
	}

	public OrderAddressItem setId_card(String id_card) {
		this.id_card = id_card;
		return this;
	}

	public void unsetId_card() {
		this.id_card = null;
	}

	/**
	 * Returns true if field id_card is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetId_card() {
		return this.id_card != null;
	}

	public void setId_cardIsSet(boolean value) {
		if (!value) {
			this.id_card = null;
		}
	}

	public void setFieldValue(_Fields field, Object value) {
		switch (field) {
		case ID:
			if (value == null) {
				unsetId();
			} else {
				setId((Integer) value);
			}
			break;

		case ORDER_ID:
			if (value == null) {
				unsetOrder_id();
			} else {
				setOrder_id((Integer) value);
			}
			break;

		case ZONE_ID:
			if (value == null) {
				unsetZone_id();
			} else {
				setZone_id((Integer) value);
			}
			break;

		case STREET:
			if (value == null) {
				unsetStreet();
			} else {
				setStreet((String) value);
			}
			break;

		case CONSIGNEE:
			if (value == null) {
				unsetConsignee();
			} else {
				setConsignee((String) value);
			}
			break;

		case PHONE:
			if (value == null) {
				unsetPhone();
			} else {
				setPhone((String) value);
			}
			break;

		case WEIXIN_ID:
			if (value == null) {
				unsetWeixin_id();
			} else {
				setWeixin_id((String) value);
			}
			break;

		case ARCHIVE:
			if (value == null) {
				unsetArchive();
			} else {
				setArchive((Boolean) value);
			}
			break;

		case CREATED_AT:
			if (value == null) {
				unsetCreated_at();
			} else {
				setCreated_at((Integer) value);
			}
			break;

		case UPDATED_AT:
			if (value == null) {
				unsetUpdated_at();
			} else {
				setUpdated_at((Integer) value);
			}
			break;

		case ID_CARD:
			if (value == null) {
				unsetId_card();
			} else {
				setId_card((String) value);
			}
			break;

		}
	}

	public Object getFieldValue(_Fields field) {
		switch (field) {
		case ID:
			return getId();

		case ORDER_ID:
			return getOrder_id();

		case ZONE_ID:
			return getZone_id();

		case STREET:
			return getStreet();

		case CONSIGNEE:
			return getConsignee();

		case PHONE:
			return getPhone();

		case WEIXIN_ID:
			return getWeixin_id();

		case ARCHIVE:
			return isArchive();

		case CREATED_AT:
			return getCreated_at();

		case UPDATED_AT:
			return getUpdated_at();

		case ID_CARD:
			return getId_card();

		}
		throw new IllegalStateException();
	}

	/**
	 * Returns true if field corresponding to fieldID is set (has been assigned
	 * a value) and false otherwise
	 */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new IllegalArgumentException();
		}

		switch (field) {
		case ID:
			return isSetId();
		case ORDER_ID:
			return isSetOrder_id();
		case ZONE_ID:
			return isSetZone_id();
		case STREET:
			return isSetStreet();
		case CONSIGNEE:
			return isSetConsignee();
		case PHONE:
			return isSetPhone();
		case WEIXIN_ID:
			return isSetWeixin_id();
		case ARCHIVE:
			return isSetArchive();
		case CREATED_AT:
			return isSetCreated_at();
		case UPDATED_AT:
			return isSetUpdated_at();
		case ID_CARD:
			return isSetId_card();
		}
		throw new IllegalStateException();
	}

	public boolean equals(Object that) {
		if (that == null)
			return false;
		if (that instanceof OrderAddressItem)
			return this.equals((OrderAddressItem) that);
		return false;
	}

	public boolean equals(OrderAddressItem that) {
		if (that == null)
			return false;

		boolean this_present_id = true;
		boolean that_present_id = true;
		if (this_present_id || that_present_id) {
			if (!(this_present_id && that_present_id))
				return false;
			if (this.id != that.id)
				return false;
		}

		boolean this_present_order_id = true;
		boolean that_present_order_id = true;
		if (this_present_order_id || that_present_order_id) {
			if (!(this_present_order_id && that_present_order_id))
				return false;
			if (this.order_id != that.order_id)
				return false;
		}

		boolean this_present_zone_id = true;
		boolean that_present_zone_id = true;
		if (this_present_zone_id || that_present_zone_id) {
			if (!(this_present_zone_id && that_present_zone_id))
				return false;
			if (this.zone_id != that.zone_id)
				return false;
		}

		boolean this_present_street = true && this.isSetStreet();
		boolean that_present_street = true && that.isSetStreet();
		if (this_present_street || that_present_street) {
			if (!(this_present_street && that_present_street))
				return false;
			if (!this.street.equals(that.street))
				return false;
		}

		boolean this_present_consignee = true && this.isSetConsignee();
		boolean that_present_consignee = true && that.isSetConsignee();
		if (this_present_consignee || that_present_consignee) {
			if (!(this_present_consignee && that_present_consignee))
				return false;
			if (!this.consignee.equals(that.consignee))
				return false;
		}

		boolean this_present_phone = true && this.isSetPhone();
		boolean that_present_phone = true && that.isSetPhone();
		if (this_present_phone || that_present_phone) {
			if (!(this_present_phone && that_present_phone))
				return false;
			if (!this.phone.equals(that.phone))
				return false;
		}

		boolean this_present_weixin_id = true && this.isSetWeixin_id();
		boolean that_present_weixin_id = true && that.isSetWeixin_id();
		if (this_present_weixin_id || that_present_weixin_id) {
			if (!(this_present_weixin_id && that_present_weixin_id))
				return false;
			if (!this.weixin_id.equals(that.weixin_id))
				return false;
		}

		boolean this_present_archive = true;
		boolean that_present_archive = true;
		if (this_present_archive || that_present_archive) {
			if (!(this_present_archive && that_present_archive))
				return false;
			if (this.archive != that.archive)
				return false;
		}

		boolean this_present_created_at = true;
		boolean that_present_created_at = true;
		if (this_present_created_at || that_present_created_at) {
			if (!(this_present_created_at && that_present_created_at))
				return false;
			if (this.created_at != that.created_at)
				return false;
		}

		boolean this_present_updated_at = true;
		boolean that_present_updated_at = true;
		if (this_present_updated_at || that_present_updated_at) {
			if (!(this_present_updated_at && that_present_updated_at))
				return false;
			if (this.updated_at != that.updated_at)
				return false;
		}

		boolean this_present_id_card = true && this.isSetId_card();
		boolean that_present_id_card = true && that.isSetId_card();
		if (this_present_id_card || that_present_id_card) {
			if (!(this_present_id_card && that_present_id_card))
				return false;
			if (!this.id_card.equals(that.id_card))
				return false;
		}

		return true;
	}

	public int hashCode() {
		List<Object> list = new ArrayList<Object>();

		boolean present_id = true;
		list.add(present_id);
		if (present_id)
			list.add(id);

		boolean present_order_id = true;
		list.add(present_order_id);
		if (present_order_id)
			list.add(order_id);

		boolean present_zone_id = true;
		list.add(present_zone_id);
		if (present_zone_id)
			list.add(zone_id);

		boolean present_street = true && (isSetStreet());
		list.add(present_street);
		if (present_street)
			list.add(street);

		boolean present_consignee = true && (isSetConsignee());
		list.add(present_consignee);
		if (present_consignee)
			list.add(consignee);

		boolean present_phone = true && (isSetPhone());
		list.add(present_phone);
		if (present_phone)
			list.add(phone);

		boolean present_weixin_id = true && (isSetWeixin_id());
		list.add(present_weixin_id);
		if (present_weixin_id)
			list.add(weixin_id);

		boolean present_archive = true;
		list.add(present_archive);
		if (present_archive)
			list.add(archive);

		boolean present_created_at = true;
		list.add(present_created_at);
		if (present_created_at)
			list.add(created_at);

		boolean present_updated_at = true;
		list.add(present_updated_at);
		if (present_updated_at)
			list.add(updated_at);

		boolean present_id_card = true && (isSetId_card());
		list.add(present_id_card);
		if (present_id_card)
			list.add(id_card);

		return list.hashCode();
	}

	public int compareTo(OrderAddressItem other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;

		lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetId()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetOrder_id()).compareTo(other.isSetOrder_id());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetOrder_id()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.order_id, other.order_id);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetZone_id()).compareTo(other.isSetZone_id());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetZone_id()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.zone_id, other.zone_id);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetStreet()).compareTo(other.isSetStreet());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetStreet()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.street, other.street);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetConsignee()).compareTo(other.isSetConsignee());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetConsignee()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.consignee, other.consignee);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetPhone()).compareTo(other.isSetPhone());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetPhone()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.phone, other.phone);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetWeixin_id()).compareTo(other.isSetWeixin_id());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetWeixin_id()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.weixin_id, other.weixin_id);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetArchive()).compareTo(other.isSetArchive());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetArchive()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.archive, other.archive);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetCreated_at()).compareTo(other.isSetCreated_at());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetCreated_at()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.created_at, other.created_at);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetUpdated_at()).compareTo(other.isSetUpdated_at());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetUpdated_at()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updated_at, other.updated_at);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetId_card()).compareTo(other.isSetId_card());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetId_card()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id_card, other.id_card);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
		schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
		schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
	}

	public String toString() {
		StringBuilder sb = new StringBuilder("OrderAddressItem(");
		boolean first = true;

		sb.append("id:");
		sb.append(this.id);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("order_id:");
		sb.append(this.order_id);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("zone_id:");
		sb.append(this.zone_id);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("street:");
		if (this.street == null) {
			sb.append("null");
		} else {
			sb.append(this.street);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("consignee:");
		if (this.consignee == null) {
			sb.append("null");
		} else {
			sb.append(this.consignee);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("phone:");
		if (this.phone == null) {
			sb.append("null");
		} else {
			sb.append(this.phone);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("weixin_id:");
		if (this.weixin_id == null) {
			sb.append("null");
		} else {
			sb.append(this.weixin_id);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("archive:");
		sb.append(this.archive);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("created_at:");
		sb.append(this.created_at);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("updated_at:");
		sb.append(this.updated_at);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("id_card:");
		if (this.id_card == null) {
			sb.append("null");
		} else {
			sb.append(this.id_card);
		}
		first = false;
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		// check for sub-struct validity
	}

	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(out)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
		try {
			// it doesn't seem like you should have to do this, but java
			// serialization is wacky, and doesn't call the default constructor.
			__isset_bitfield = 0;
			read(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(in)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class OrderAddressItemStandardSchemeFactory implements SchemeFactory {
		public OrderAddressItemStandardScheme getScheme() {
			return new OrderAddressItemStandardScheme();
		}
	}

	private static class OrderAddressItemStandardScheme extends StandardScheme<OrderAddressItem> {

		public void read(org.apache.thrift.protocol.TProtocol iprot, OrderAddressItem struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
				case 1: // ID
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.id = iprot.readI32();
						struct.setIdIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 2: // ORDER_ID
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.order_id = iprot.readI32();
						struct.setOrder_idIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 3: // ZONE_ID
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.zone_id = iprot.readI32();
						struct.setZone_idIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 4: // STREET
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.street = iprot.readString();
						struct.setStreetIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 5: // CONSIGNEE
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.consignee = iprot.readString();
						struct.setConsigneeIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 6: // PHONE
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.phone = iprot.readString();
						struct.setPhoneIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 7: // WEIXIN_ID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.weixin_id = iprot.readString();
						struct.setWeixin_idIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 8: // ARCHIVE
					if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
						struct.archive = iprot.readBool();
						struct.setArchiveIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 9: // CREATED_AT
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.created_at = iprot.readI32();
						struct.setCreated_atIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 10: // UPDATED_AT
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.updated_at = iprot.readI32();
						struct.setUpdated_atIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 11: // ID_CARD
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.id_card = iprot.readString();
						struct.setId_cardIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be
			// checked in the validate method
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot, OrderAddressItem struct)
				throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			oprot.writeFieldBegin(ID_FIELD_DESC);
			oprot.writeI32(struct.id);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(ORDER_ID_FIELD_DESC);
			oprot.writeI32(struct.order_id);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(ZONE_ID_FIELD_DESC);
			oprot.writeI32(struct.zone_id);
			oprot.writeFieldEnd();
			if (struct.street != null) {
				oprot.writeFieldBegin(STREET_FIELD_DESC);
				oprot.writeString(struct.street);
				oprot.writeFieldEnd();
			}
			if (struct.consignee != null) {
				oprot.writeFieldBegin(CONSIGNEE_FIELD_DESC);
				oprot.writeString(struct.consignee);
				oprot.writeFieldEnd();
			}
			if (struct.phone != null) {
				oprot.writeFieldBegin(PHONE_FIELD_DESC);
				oprot.writeString(struct.phone);
				oprot.writeFieldEnd();
			}
			if (struct.weixin_id != null) {
				oprot.writeFieldBegin(WEIXIN_ID_FIELD_DESC);
				oprot.writeString(struct.weixin_id);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin(ARCHIVE_FIELD_DESC);
			oprot.writeBool(struct.archive);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(CREATED_AT_FIELD_DESC);
			oprot.writeI32(struct.created_at);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(UPDATED_AT_FIELD_DESC);
			oprot.writeI32(struct.updated_at);
			oprot.writeFieldEnd();
			if (struct.id_card != null) {
				oprot.writeFieldBegin(ID_CARD_FIELD_DESC);
				oprot.writeString(struct.id_card);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class OrderAddressItemTupleSchemeFactory implements SchemeFactory {
		public OrderAddressItemTupleScheme getScheme() {
			return new OrderAddressItemTupleScheme();
		}
	}

	private static class OrderAddressItemTupleScheme extends TupleScheme<OrderAddressItem> {

		public void write(org.apache.thrift.protocol.TProtocol prot, OrderAddressItem struct)
				throws org.apache.thrift.TException {
			TTupleProtocol oprot = (TTupleProtocol) prot;
			BitSet optionals = new BitSet();
			if (struct.isSetId()) {
				optionals.set(0);
			}
			if (struct.isSetOrder_id()) {
				optionals.set(1);
			}
			if (struct.isSetZone_id()) {
				optionals.set(2);
			}
			if (struct.isSetStreet()) {
				optionals.set(3);
			}
			if (struct.isSetConsignee()) {
				optionals.set(4);
			}
			if (struct.isSetPhone()) {
				optionals.set(5);
			}
			if (struct.isSetWeixin_id()) {
				optionals.set(6);
			}
			if (struct.isSetArchive()) {
				optionals.set(7);
			}
			if (struct.isSetCreated_at()) {
				optionals.set(8);
			}
			if (struct.isSetUpdated_at()) {
				optionals.set(9);
			}
			if (struct.isSetId_card()) {
				optionals.set(10);
			}
			oprot.writeBitSet(optionals, 11);
			if (struct.isSetId()) {
				oprot.writeI32(struct.id);
			}
			if (struct.isSetOrder_id()) {
				oprot.writeI32(struct.order_id);
			}
			if (struct.isSetZone_id()) {
				oprot.writeI32(struct.zone_id);
			}
			if (struct.isSetStreet()) {
				oprot.writeString(struct.street);
			}
			if (struct.isSetConsignee()) {
				oprot.writeString(struct.consignee);
			}
			if (struct.isSetPhone()) {
				oprot.writeString(struct.phone);
			}
			if (struct.isSetWeixin_id()) {
				oprot.writeString(struct.weixin_id);
			}
			if (struct.isSetArchive()) {
				oprot.writeBool(struct.archive);
			}
			if (struct.isSetCreated_at()) {
				oprot.writeI32(struct.created_at);
			}
			if (struct.isSetUpdated_at()) {
				oprot.writeI32(struct.updated_at);
			}
			if (struct.isSetId_card()) {
				oprot.writeString(struct.id_card);
			}
		}

		public void read(org.apache.thrift.protocol.TProtocol prot, OrderAddressItem struct)
				throws org.apache.thrift.TException {
			TTupleProtocol iprot = (TTupleProtocol) prot;
			BitSet incoming = iprot.readBitSet(11);
			if (incoming.get(0)) {
				struct.id = iprot.readI32();
				struct.setIdIsSet(true);
			}
			if (incoming.get(1)) {
				struct.order_id = iprot.readI32();
				struct.setOrder_idIsSet(true);
			}
			if (incoming.get(2)) {
				struct.zone_id = iprot.readI32();
				struct.setZone_idIsSet(true);
			}
			if (incoming.get(3)) {
				struct.street = iprot.readString();
				struct.setStreetIsSet(true);
			}
			if (incoming.get(4)) {
				struct.consignee = iprot.readString();
				struct.setConsigneeIsSet(true);
			}
			if (incoming.get(5)) {
				struct.phone = iprot.readString();
				struct.setPhoneIsSet(true);
			}
			if (incoming.get(6)) {
				struct.weixin_id = iprot.readString();
				struct.setWeixin_idIsSet(true);
			}
			if (incoming.get(7)) {
				struct.archive = iprot.readBool();
				struct.setArchiveIsSet(true);
			}
			if (incoming.get(8)) {
				struct.created_at = iprot.readI32();
				struct.setCreated_atIsSet(true);
			}
			if (incoming.get(9)) {
				struct.updated_at = iprot.readI32();
				struct.setUpdated_atIsSet(true);
			}
			if (incoming.get(10)) {
				struct.id_card = iprot.readString();
				struct.setId_cardIsSet(true);
			}
		}
	}

}
