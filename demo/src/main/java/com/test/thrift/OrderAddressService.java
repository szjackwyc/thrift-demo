/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.test.thrift;

import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Generated;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked" })
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-07-01")
public class OrderAddressService {

	public interface Iface {

		public List<OrderAddressItem> select_by_order_id(int order_id) throws org.apache.thrift.TException;

		public List<OrderAddressItem> select_by_id(int id) throws org.apache.thrift.TException;

		public int update_address(OrderAddressItem req) throws org.apache.thrift.TException;

	}

	public interface AsyncIface {

		public void select_by_order_id(int order_id, org.apache.thrift.async.AsyncMethodCallback resultHandler)
				throws org.apache.thrift.TException;

		public void select_by_id(int id, org.apache.thrift.async.AsyncMethodCallback resultHandler)
				throws org.apache.thrift.TException;

		public void update_address(OrderAddressItem req, org.apache.thrift.async.AsyncMethodCallback resultHandler)
				throws org.apache.thrift.TException;

	}

	public static class Client extends org.apache.thrift.TServiceClient implements Iface {
		public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
			public Factory() {
			}

			public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
				return new Client(prot);
			}

			public Client getClient(org.apache.thrift.protocol.TProtocol iprot,
					org.apache.thrift.protocol.TProtocol oprot) {
				return new Client(iprot, oprot);
			}
		}

		public Client(org.apache.thrift.protocol.TProtocol prot) {
			super(prot, prot);
		}

		public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
			super(iprot, oprot);
		}

		public List<OrderAddressItem> select_by_order_id(int order_id) throws org.apache.thrift.TException {
			send_select_by_order_id(order_id);
			return recv_select_by_order_id();
		}

		public void send_select_by_order_id(int order_id) throws org.apache.thrift.TException {
			select_by_order_id_args args = new select_by_order_id_args();
			args.setOrder_id(order_id);
			sendBase("select_by_order_id", args);
		}

		public List<OrderAddressItem> recv_select_by_order_id() throws org.apache.thrift.TException {
			select_by_order_id_result result = new select_by_order_id_result();
			receiveBase(result, "select_by_order_id");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"select_by_order_id failed: unknown result");
		}

		public List<OrderAddressItem> select_by_id(int id) throws org.apache.thrift.TException {
			send_select_by_id(id);
			return recv_select_by_id();
		}

		public void send_select_by_id(int id) throws org.apache.thrift.TException {
			select_by_id_args args = new select_by_id_args();
			args.setId(id);
			sendBase("select_by_id", args);
		}

		public List<OrderAddressItem> recv_select_by_id() throws org.apache.thrift.TException {
			select_by_id_result result = new select_by_id_result();
			receiveBase(result, "select_by_id");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"select_by_id failed: unknown result");
		}

		public int update_address(OrderAddressItem req) throws org.apache.thrift.TException {
			send_update_address(req);
			return recv_update_address();
		}

		public void send_update_address(OrderAddressItem req) throws org.apache.thrift.TException {
			update_address_args args = new update_address_args();
			args.setReq(req);
			sendBase("update_address", args);
		}

		public int recv_update_address() throws org.apache.thrift.TException {
			update_address_result result = new update_address_result();
			receiveBase(result, "update_address");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"update_address failed: unknown result");
		}

	}

	public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
		public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
			private org.apache.thrift.async.TAsyncClientManager clientManager;
			private org.apache.thrift.protocol.TProtocolFactory protocolFactory;

			public Factory(org.apache.thrift.async.TAsyncClientManager clientManager,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
				this.clientManager = clientManager;
				this.protocolFactory = protocolFactory;
			}

			public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
				return new AsyncClient(protocolFactory, clientManager, transport);
			}
		}

		public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory,
				org.apache.thrift.async.TAsyncClientManager clientManager,
				org.apache.thrift.transport.TNonblockingTransport transport) {
			super(protocolFactory, clientManager, transport);
		}

		public void select_by_order_id(int order_id, org.apache.thrift.async.AsyncMethodCallback resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			select_by_order_id_call method_call = new select_by_order_id_call(order_id, resultHandler, this,
					___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class select_by_order_id_call extends org.apache.thrift.async.TAsyncMethodCall {
			private int order_id;

			public select_by_order_id_call(int order_id, org.apache.thrift.async.AsyncMethodCallback resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.order_id = order_id;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("select_by_order_id",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				select_by_order_id_args args = new select_by_order_id_args();
				args.setOrder_id(order_id);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public List<OrderAddressItem> getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_select_by_order_id();
			}
		}

		public void select_by_id(int id, org.apache.thrift.async.AsyncMethodCallback resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			select_by_id_call method_call = new select_by_id_call(id, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class select_by_id_call extends org.apache.thrift.async.TAsyncMethodCall {
			private int id;

			public select_by_id_call(int id, org.apache.thrift.async.AsyncMethodCallback resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.id = id;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("select_by_id",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				select_by_id_args args = new select_by_id_args();
				args.setId(id);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public List<OrderAddressItem> getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_select_by_id();
			}
		}

		public void update_address(OrderAddressItem req, org.apache.thrift.async.AsyncMethodCallback resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			update_address_call method_call = new update_address_call(req, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class update_address_call extends org.apache.thrift.async.TAsyncMethodCall {
			private OrderAddressItem req;

			public update_address_call(OrderAddressItem req, org.apache.thrift.async.AsyncMethodCallback resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.req = req;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("update_address",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				update_address_args args = new update_address_args();
				args.setReq(req);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public int getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_update_address();
			}
		}

	}

	public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I>
			implements org.apache.thrift.TProcessor {
		private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());

		public Processor(I iface) {
			super(iface, getProcessMap(
					new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
		}

		protected Processor(I iface,
				Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
			super(iface, getProcessMap(processMap));
		}

		private static <I extends Iface> Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(
				Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
			processMap.put("select_by_order_id", new select_by_order_id());
			processMap.put("select_by_id", new select_by_id());
			processMap.put("update_address", new update_address());
			return processMap;
		}

		public static class select_by_order_id<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, select_by_order_id_args> {
			public select_by_order_id() {
				super("select_by_order_id");
			}

			public select_by_order_id_args getEmptyArgsInstance() {
				return new select_by_order_id_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public select_by_order_id_result getResult(I iface, select_by_order_id_args args)
					throws org.apache.thrift.TException {
				select_by_order_id_result result = new select_by_order_id_result();
				result.success = iface.select_by_order_id(args.order_id);
				return result;
			}
		}

		public static class select_by_id<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, select_by_id_args> {
			public select_by_id() {
				super("select_by_id");
			}

			public select_by_id_args getEmptyArgsInstance() {
				return new select_by_id_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public select_by_id_result getResult(I iface, select_by_id_args args) throws org.apache.thrift.TException {
				select_by_id_result result = new select_by_id_result();
				result.success = iface.select_by_id(args.id);
				return result;
			}
		}

		public static class update_address<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, update_address_args> {
			public update_address() {
				super("update_address");
			}

			public update_address_args getEmptyArgsInstance() {
				return new update_address_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public update_address_result getResult(I iface, update_address_args args)
					throws org.apache.thrift.TException {
				update_address_result result = new update_address_result();
				result.success = iface.update_address(args.req);
				result.setSuccessIsSet(true);
				return result;
			}
		}

	}

	public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
		private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());

		public AsyncProcessor(I iface) {
			super(iface, getProcessMap(
					new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
		}

		protected AsyncProcessor(I iface,
				Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
			super(iface, getProcessMap(processMap));
		}

		private static <I extends AsyncIface> Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> getProcessMap(
				Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
			processMap.put("select_by_order_id", new select_by_order_id());
			processMap.put("select_by_id", new select_by_id());
			processMap.put("update_address", new update_address());
			return processMap;
		}

		public static class select_by_order_id<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, select_by_order_id_args, List<OrderAddressItem>> {
			public select_by_order_id() {
				super("select_by_order_id");
			}

			public select_by_order_id_args getEmptyArgsInstance() {
				return new select_by_order_id_args();
			}

			public AsyncMethodCallback<List<OrderAddressItem>> getResultHandler(final AsyncFrameBuffer fb,
					final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new AsyncMethodCallback<List<OrderAddressItem>>() {
					public void onComplete(List<OrderAddressItem> o) {
						select_by_order_id_result result = new select_by_order_id_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
							return;
						} catch (Exception e) {
							LOGGER.error("Exception writing to internal frame buffer", e);
						}
						fb.close();
					}

					public void onError(Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TBase msg;
						select_by_order_id_result result = new select_by_order_id_result();
						{
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
							return;
						} catch (Exception ex) {
							LOGGER.error("Exception writing to internal frame buffer", ex);
						}
						fb.close();
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, select_by_order_id_args args,
					org.apache.thrift.async.AsyncMethodCallback<List<OrderAddressItem>> resultHandler)
							throws TException {
				iface.select_by_order_id(args.order_id, resultHandler);
			}
		}

		public static class select_by_id<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, select_by_id_args, List<OrderAddressItem>> {
			public select_by_id() {
				super("select_by_id");
			}

			public select_by_id_args getEmptyArgsInstance() {
				return new select_by_id_args();
			}

			public AsyncMethodCallback<List<OrderAddressItem>> getResultHandler(final AsyncFrameBuffer fb,
					final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new AsyncMethodCallback<List<OrderAddressItem>>() {
					public void onComplete(List<OrderAddressItem> o) {
						select_by_id_result result = new select_by_id_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
							return;
						} catch (Exception e) {
							LOGGER.error("Exception writing to internal frame buffer", e);
						}
						fb.close();
					}

					public void onError(Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TBase msg;
						select_by_id_result result = new select_by_id_result();
						{
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
							return;
						} catch (Exception ex) {
							LOGGER.error("Exception writing to internal frame buffer", ex);
						}
						fb.close();
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, select_by_id_args args,
					org.apache.thrift.async.AsyncMethodCallback<List<OrderAddressItem>> resultHandler)
							throws TException {
				iface.select_by_id(args.id, resultHandler);
			}
		}

		public static class update_address<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, update_address_args, Integer> {
			public update_address() {
				super("update_address");
			}

			public update_address_args getEmptyArgsInstance() {
				return new update_address_args();
			}

			public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new AsyncMethodCallback<Integer>() {
					public void onComplete(Integer o) {
						update_address_result result = new update_address_result();
						result.success = o;
						result.setSuccessIsSet(true);
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
							return;
						} catch (Exception e) {
							LOGGER.error("Exception writing to internal frame buffer", e);
						}
						fb.close();
					}

					public void onError(Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TBase msg;
						update_address_result result = new update_address_result();
						{
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
							return;
						} catch (Exception ex) {
							LOGGER.error("Exception writing to internal frame buffer", ex);
						}
						fb.close();
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, update_address_args args,
					org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
				iface.update_address(args.req, resultHandler);
			}
		}

	}

	public static class select_by_order_id_args
			implements org.apache.thrift.TBase<select_by_order_id_args, select_by_order_id_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<select_by_order_id_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"select_by_order_id_args");

		private static final org.apache.thrift.protocol.TField ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"order_id", org.apache.thrift.protocol.TType.I32, (short) 1);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

		static {
			schemes.put(StandardScheme.class, new select_by_order_id_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class, new select_by_order_id_argsTupleSchemeFactory());
		}

		public int order_id; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			ORDER_ID((short) 1, "order_id");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // ORDER_ID
					return ORDER_ID;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		private static final int __ORDER_ID_ISSET_ID = 0;
		private byte __isset_bitfield = 0;
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.ORDER_ID,
					new org.apache.thrift.meta_data.FieldMetaData("order_id",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(select_by_order_id_args.class, metaDataMap);
		}

		public select_by_order_id_args() {
		}

		public select_by_order_id_args(int order_id) {
			this();
			this.order_id = order_id;
			setOrder_idIsSet(true);
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public select_by_order_id_args(select_by_order_id_args other) {
			__isset_bitfield = other.__isset_bitfield;
			this.order_id = other.order_id;
		}

		public select_by_order_id_args deepCopy() {
			return new select_by_order_id_args(this);
		}

		public void clear() {
			setOrder_idIsSet(false);
			this.order_id = 0;
		}

		public int getOrder_id() {
			return this.order_id;
		}

		public select_by_order_id_args setOrder_id(int order_id) {
			this.order_id = order_id;
			setOrder_idIsSet(true);
			return this;
		}

		public void unsetOrder_id() {
			__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORDER_ID_ISSET_ID);
		}

		/**
		 * Returns true if field order_id is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetOrder_id() {
			return EncodingUtils.testBit(__isset_bitfield, __ORDER_ID_ISSET_ID);
		}

		public void setOrder_idIsSet(boolean value) {
			__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORDER_ID_ISSET_ID, value);
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case ORDER_ID:
				if (value == null) {
					unsetOrder_id();
				} else {
					setOrder_id((Integer) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case ORDER_ID:
				return getOrder_id();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case ORDER_ID:
				return isSetOrder_id();
			}
			throw new IllegalStateException();
		}

		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof select_by_order_id_args)
				return this.equals((select_by_order_id_args) that);
			return false;
		}

		public boolean equals(select_by_order_id_args that) {
			if (that == null)
				return false;

			boolean this_present_order_id = true;
			boolean that_present_order_id = true;
			if (this_present_order_id || that_present_order_id) {
				if (!(this_present_order_id && that_present_order_id))
					return false;
				if (this.order_id != that.order_id)
					return false;
			}

			return true;
		}

		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_order_id = true;
			list.add(present_order_id);
			if (present_order_id)
				list.add(order_id);

			return list.hashCode();
		}

		public int compareTo(select_by_order_id_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetOrder_id()).compareTo(other.isSetOrder_id());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetOrder_id()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.order_id, other.order_id);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		public String toString() {
			StringBuilder sb = new StringBuilder("select_by_order_id_args(");
			boolean first = true;

			sb.append("order_id:");
			sb.append(this.order_id);
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java
				// serialization is wacky, and doesn't call the default
				// constructor.
				__isset_bitfield = 0;
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class select_by_order_id_argsStandardSchemeFactory implements SchemeFactory {
			public select_by_order_id_argsStandardScheme getScheme() {
				return new select_by_order_id_argsStandardScheme();
			}
		}

		private static class select_by_order_id_argsStandardScheme extends StandardScheme<select_by_order_id_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, select_by_order_id_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // ORDER_ID
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.order_id = iprot.readI32();
							struct.setOrder_idIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, select_by_order_id_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				oprot.writeFieldBegin(ORDER_ID_FIELD_DESC);
				oprot.writeI32(struct.order_id);
				oprot.writeFieldEnd();
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class select_by_order_id_argsTupleSchemeFactory implements SchemeFactory {
			public select_by_order_id_argsTupleScheme getScheme() {
				return new select_by_order_id_argsTupleScheme();
			}
		}

		private static class select_by_order_id_argsTupleScheme extends TupleScheme<select_by_order_id_args> {

			public void write(org.apache.thrift.protocol.TProtocol prot, select_by_order_id_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetOrder_id()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetOrder_id()) {
					oprot.writeI32(struct.order_id);
				}
			}

			public void read(org.apache.thrift.protocol.TProtocol prot, select_by_order_id_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.order_id = iprot.readI32();
					struct.setOrder_idIsSet(true);
				}
			}
		}

	}

	public static class select_by_order_id_result
			implements org.apache.thrift.TBase<select_by_order_id_result, select_by_order_id_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<select_by_order_id_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"select_by_order_id_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.LIST, (short) 0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

		static {
			schemes.put(StandardScheme.class, new select_by_order_id_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class, new select_by_order_id_resultTupleSchemeFactory());
		}

		public List<OrderAddressItem> success; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									OrderAddressItem.class))));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(select_by_order_id_result.class,
					metaDataMap);
		}

		public select_by_order_id_result() {
		}

		public select_by_order_id_result(List<OrderAddressItem> success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public select_by_order_id_result(select_by_order_id_result other) {
			if (other.isSetSuccess()) {
				List<OrderAddressItem> __this__success = new ArrayList<OrderAddressItem>(other.success.size());
				for (OrderAddressItem other_element : other.success) {
					__this__success.add(new OrderAddressItem(other_element));
				}
				this.success = __this__success;
			}
		}

		public select_by_order_id_result deepCopy() {
			return new select_by_order_id_result(this);
		}

		public void clear() {
			this.success = null;
		}

		public int getSuccessSize() {
			return (this.success == null) ? 0 : this.success.size();
		}

		public java.util.Iterator<OrderAddressItem> getSuccessIterator() {
			return (this.success == null) ? null : this.success.iterator();
		}

		public void addToSuccess(OrderAddressItem elem) {
			if (this.success == null) {
				this.success = new ArrayList<OrderAddressItem>();
			}
			this.success.add(elem);
		}

		public List<OrderAddressItem> getSuccess() {
			return this.success;
		}

		public select_by_order_id_result setSuccess(List<OrderAddressItem> success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((List<OrderAddressItem>) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof select_by_order_id_result)
				return this.equals((select_by_order_id_result) that);
			return false;
		}

		public boolean equals(select_by_order_id_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true && (isSetSuccess());
			list.add(present_success);
			if (present_success)
				list.add(success);

			return list.hashCode();
		}

		public int compareTo(select_by_order_id_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		public String toString() {
			StringBuilder sb = new StringBuilder("select_by_order_id_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class select_by_order_id_resultStandardSchemeFactory implements SchemeFactory {
			public select_by_order_id_resultStandardScheme getScheme() {
				return new select_by_order_id_resultStandardScheme();
			}
		}

		private static class select_by_order_id_resultStandardScheme extends StandardScheme<select_by_order_id_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, select_by_order_id_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
							{
								org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
								struct.success = new ArrayList<OrderAddressItem>(_list0.size);
								OrderAddressItem _elem1;
								for (int _i2 = 0; _i2 < _list0.size; ++_i2) {
									_elem1 = new OrderAddressItem();
									_elem1.read(iprot);
									struct.success.add(_elem1);
								}
								iprot.readListEnd();
							}
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, select_by_order_id_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					{
						oprot.writeListBegin(new org.apache.thrift.protocol.TList(
								org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
						for (OrderAddressItem _iter3 : struct.success) {
							_iter3.write(oprot);
						}
						oprot.writeListEnd();
					}
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class select_by_order_id_resultTupleSchemeFactory implements SchemeFactory {
			public select_by_order_id_resultTupleScheme getScheme() {
				return new select_by_order_id_resultTupleScheme();
			}
		}

		private static class select_by_order_id_resultTupleScheme extends TupleScheme<select_by_order_id_result> {

			public void write(org.apache.thrift.protocol.TProtocol prot, select_by_order_id_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					{
						oprot.writeI32(struct.success.size());
						for (OrderAddressItem _iter4 : struct.success) {
							_iter4.write(oprot);
						}
					}
				}
			}

			public void read(org.apache.thrift.protocol.TProtocol prot, select_by_order_id_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					{
						org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(
								org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
						struct.success = new ArrayList<OrderAddressItem>(_list5.size);
						OrderAddressItem _elem6;
						for (int _i7 = 0; _i7 < _list5.size; ++_i7) {
							_elem6 = new OrderAddressItem();
							_elem6.read(iprot);
							struct.success.add(_elem6);
						}
					}
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

	public static class select_by_id_args
			implements org.apache.thrift.TBase<select_by_id_args, select_by_id_args._Fields>, java.io.Serializable,
			Cloneable, Comparable<select_by_id_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"select_by_id_args");

		private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"id", org.apache.thrift.protocol.TType.I32, (short) 1);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

		static {
			schemes.put(StandardScheme.class, new select_by_id_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class, new select_by_id_argsTupleSchemeFactory());
		}

		public int id; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			ID((short) 1, "id");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // ID
					return ID;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		private static final int __ID_ISSET_ID = 0;
		private byte __isset_bitfield = 0;
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.ID,
					new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(select_by_id_args.class, metaDataMap);
		}

		public select_by_id_args() {
		}

		public select_by_id_args(int id) {
			this();
			this.id = id;
			setIdIsSet(true);
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public select_by_id_args(select_by_id_args other) {
			__isset_bitfield = other.__isset_bitfield;
			this.id = other.id;
		}

		public select_by_id_args deepCopy() {
			return new select_by_id_args(this);
		}

		public void clear() {
			setIdIsSet(false);
			this.id = 0;
		}

		public int getId() {
			return this.id;
		}

		public select_by_id_args setId(int id) {
			this.id = id;
			setIdIsSet(true);
			return this;
		}

		public void unsetId() {
			__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
		}

		/**
		 * Returns true if field id is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetId() {
			return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
		}

		public void setIdIsSet(boolean value) {
			__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case ID:
				if (value == null) {
					unsetId();
				} else {
					setId((Integer) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case ID:
				return getId();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case ID:
				return isSetId();
			}
			throw new IllegalStateException();
		}

		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof select_by_id_args)
				return this.equals((select_by_id_args) that);
			return false;
		}

		public boolean equals(select_by_id_args that) {
			if (that == null)
				return false;

			boolean this_present_id = true;
			boolean that_present_id = true;
			if (this_present_id || that_present_id) {
				if (!(this_present_id && that_present_id))
					return false;
				if (this.id != that.id)
					return false;
			}

			return true;
		}

		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_id = true;
			list.add(present_id);
			if (present_id)
				list.add(id);

			return list.hashCode();
		}

		public int compareTo(select_by_id_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetId()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		public String toString() {
			StringBuilder sb = new StringBuilder("select_by_id_args(");
			boolean first = true;

			sb.append("id:");
			sb.append(this.id);
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java
				// serialization is wacky, and doesn't call the default
				// constructor.
				__isset_bitfield = 0;
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class select_by_id_argsStandardSchemeFactory implements SchemeFactory {
			public select_by_id_argsStandardScheme getScheme() {
				return new select_by_id_argsStandardScheme();
			}
		}

		private static class select_by_id_argsStandardScheme extends StandardScheme<select_by_id_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, select_by_id_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // ID
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.id = iprot.readI32();
							struct.setIdIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, select_by_id_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				oprot.writeFieldBegin(ID_FIELD_DESC);
				oprot.writeI32(struct.id);
				oprot.writeFieldEnd();
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class select_by_id_argsTupleSchemeFactory implements SchemeFactory {
			public select_by_id_argsTupleScheme getScheme() {
				return new select_by_id_argsTupleScheme();
			}
		}

		private static class select_by_id_argsTupleScheme extends TupleScheme<select_by_id_args> {

			public void write(org.apache.thrift.protocol.TProtocol prot, select_by_id_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetId()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetId()) {
					oprot.writeI32(struct.id);
				}
			}

			public void read(org.apache.thrift.protocol.TProtocol prot, select_by_id_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.id = iprot.readI32();
					struct.setIdIsSet(true);
				}
			}
		}

	}

	public static class select_by_id_result
			implements org.apache.thrift.TBase<select_by_id_result, select_by_id_result._Fields>, java.io.Serializable,
			Cloneable, Comparable<select_by_id_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"select_by_id_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.LIST, (short) 0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

		static {
			schemes.put(StandardScheme.class, new select_by_id_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class, new select_by_id_resultTupleSchemeFactory());
		}

		public List<OrderAddressItem> success; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									OrderAddressItem.class))));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(select_by_id_result.class, metaDataMap);
		}

		public select_by_id_result() {
		}

		public select_by_id_result(List<OrderAddressItem> success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public select_by_id_result(select_by_id_result other) {
			if (other.isSetSuccess()) {
				List<OrderAddressItem> __this__success = new ArrayList<OrderAddressItem>(other.success.size());
				for (OrderAddressItem other_element : other.success) {
					__this__success.add(new OrderAddressItem(other_element));
				}
				this.success = __this__success;
			}
		}

		public select_by_id_result deepCopy() {
			return new select_by_id_result(this);
		}

		public void clear() {
			this.success = null;
		}

		public int getSuccessSize() {
			return (this.success == null) ? 0 : this.success.size();
		}

		public java.util.Iterator<OrderAddressItem> getSuccessIterator() {
			return (this.success == null) ? null : this.success.iterator();
		}

		public void addToSuccess(OrderAddressItem elem) {
			if (this.success == null) {
				this.success = new ArrayList<OrderAddressItem>();
			}
			this.success.add(elem);
		}

		public List<OrderAddressItem> getSuccess() {
			return this.success;
		}

		public select_by_id_result setSuccess(List<OrderAddressItem> success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((List<OrderAddressItem>) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof select_by_id_result)
				return this.equals((select_by_id_result) that);
			return false;
		}

		public boolean equals(select_by_id_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true && (isSetSuccess());
			list.add(present_success);
			if (present_success)
				list.add(success);

			return list.hashCode();
		}

		public int compareTo(select_by_id_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		public String toString() {
			StringBuilder sb = new StringBuilder("select_by_id_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class select_by_id_resultStandardSchemeFactory implements SchemeFactory {
			public select_by_id_resultStandardScheme getScheme() {
				return new select_by_id_resultStandardScheme();
			}
		}

		private static class select_by_id_resultStandardScheme extends StandardScheme<select_by_id_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, select_by_id_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
							{
								org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
								struct.success = new ArrayList<OrderAddressItem>(_list8.size);
								OrderAddressItem _elem9;
								for (int _i10 = 0; _i10 < _list8.size; ++_i10) {
									_elem9 = new OrderAddressItem();
									_elem9.read(iprot);
									struct.success.add(_elem9);
								}
								iprot.readListEnd();
							}
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, select_by_id_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					{
						oprot.writeListBegin(new org.apache.thrift.protocol.TList(
								org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
						for (OrderAddressItem _iter11 : struct.success) {
							_iter11.write(oprot);
						}
						oprot.writeListEnd();
					}
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class select_by_id_resultTupleSchemeFactory implements SchemeFactory {
			public select_by_id_resultTupleScheme getScheme() {
				return new select_by_id_resultTupleScheme();
			}
		}

		private static class select_by_id_resultTupleScheme extends TupleScheme<select_by_id_result> {

			public void write(org.apache.thrift.protocol.TProtocol prot, select_by_id_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					{
						oprot.writeI32(struct.success.size());
						for (OrderAddressItem _iter12 : struct.success) {
							_iter12.write(oprot);
						}
					}
				}
			}

			public void read(org.apache.thrift.protocol.TProtocol prot, select_by_id_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					{
						org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(
								org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
						struct.success = new ArrayList<OrderAddressItem>(_list13.size);
						OrderAddressItem _elem14;
						for (int _i15 = 0; _i15 < _list13.size; ++_i15) {
							_elem14 = new OrderAddressItem();
							_elem14.read(iprot);
							struct.success.add(_elem14);
						}
					}
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

	public static class update_address_args
			implements org.apache.thrift.TBase<update_address_args, update_address_args._Fields>, java.io.Serializable,
			Cloneable, Comparable<update_address_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"update_address_args");

		private static final org.apache.thrift.protocol.TField REQ_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"req", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

		static {
			schemes.put(StandardScheme.class, new update_address_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class, new update_address_argsTupleSchemeFactory());
		}

		public OrderAddressItem req; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			REQ((short) 1, "req");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // REQ
					return REQ;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.REQ,
					new org.apache.thrift.meta_data.FieldMetaData("req",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									OrderAddressItem.class)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(update_address_args.class, metaDataMap);
		}

		public update_address_args() {
		}

		public update_address_args(OrderAddressItem req) {
			this();
			this.req = req;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public update_address_args(update_address_args other) {
			if (other.isSetReq()) {
				this.req = new OrderAddressItem(other.req);
			}
		}

		public update_address_args deepCopy() {
			return new update_address_args(this);
		}

		public void clear() {
			this.req = null;
		}

		public OrderAddressItem getReq() {
			return this.req;
		}

		public update_address_args setReq(OrderAddressItem req) {
			this.req = req;
			return this;
		}

		public void unsetReq() {
			this.req = null;
		}

		/**
		 * Returns true if field req is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetReq() {
			return this.req != null;
		}

		public void setReqIsSet(boolean value) {
			if (!value) {
				this.req = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case REQ:
				if (value == null) {
					unsetReq();
				} else {
					setReq((OrderAddressItem) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case REQ:
				return getReq();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case REQ:
				return isSetReq();
			}
			throw new IllegalStateException();
		}

		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof update_address_args)
				return this.equals((update_address_args) that);
			return false;
		}

		public boolean equals(update_address_args that) {
			if (that == null)
				return false;

			boolean this_present_req = true && this.isSetReq();
			boolean that_present_req = true && that.isSetReq();
			if (this_present_req || that_present_req) {
				if (!(this_present_req && that_present_req))
					return false;
				if (!this.req.equals(that.req))
					return false;
			}

			return true;
		}

		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_req = true && (isSetReq());
			list.add(present_req);
			if (present_req)
				list.add(req);

			return list.hashCode();
		}

		public int compareTo(update_address_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetReq()).compareTo(other.isSetReq());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetReq()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.req, other.req);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		public String toString() {
			StringBuilder sb = new StringBuilder("update_address_args(");
			boolean first = true;

			sb.append("req:");
			if (this.req == null) {
				sb.append("null");
			} else {
				sb.append(this.req);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (req != null) {
				req.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class update_address_argsStandardSchemeFactory implements SchemeFactory {
			public update_address_argsStandardScheme getScheme() {
				return new update_address_argsStandardScheme();
			}
		}

		private static class update_address_argsStandardScheme extends StandardScheme<update_address_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, update_address_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // REQ
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.req = new OrderAddressItem();
							struct.req.read(iprot);
							struct.setReqIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, update_address_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.req != null) {
					oprot.writeFieldBegin(REQ_FIELD_DESC);
					struct.req.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class update_address_argsTupleSchemeFactory implements SchemeFactory {
			public update_address_argsTupleScheme getScheme() {
				return new update_address_argsTupleScheme();
			}
		}

		private static class update_address_argsTupleScheme extends TupleScheme<update_address_args> {

			public void write(org.apache.thrift.protocol.TProtocol prot, update_address_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetReq()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetReq()) {
					struct.req.write(oprot);
				}
			}

			public void read(org.apache.thrift.protocol.TProtocol prot, update_address_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.req = new OrderAddressItem();
					struct.req.read(iprot);
					struct.setReqIsSet(true);
				}
			}
		}

	}

	public static class update_address_result
			implements org.apache.thrift.TBase<update_address_result, update_address_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<update_address_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"update_address_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.I32, (short) 0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

		static {
			schemes.put(StandardScheme.class, new update_address_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class, new update_address_resultTupleSchemeFactory());
		}

		public int success; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		private static final int __SUCCESS_ISSET_ID = 0;
		private byte __isset_bitfield = 0;
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(update_address_result.class, metaDataMap);
		}

		public update_address_result() {
		}

		public update_address_result(int success) {
			this();
			this.success = success;
			setSuccessIsSet(true);
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public update_address_result(update_address_result other) {
			__isset_bitfield = other.__isset_bitfield;
			this.success = other.success;
		}

		public update_address_result deepCopy() {
			return new update_address_result(this);
		}

		public void clear() {
			setSuccessIsSet(false);
			this.success = 0;
		}

		public int getSuccess() {
			return this.success;
		}

		public update_address_result setSuccess(int success) {
			this.success = success;
			setSuccessIsSet(true);
			return this;
		}

		public void unsetSuccess() {
			__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSuccess() {
			return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
		}

		public void setSuccessIsSet(boolean value) {
			__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((Integer) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof update_address_result)
				return this.equals((update_address_result) that);
			return false;
		}

		public boolean equals(update_address_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true;
			boolean that_present_success = true;
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (this.success != that.success)
					return false;
			}

			return true;
		}

		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true;
			list.add(present_success);
			if (present_success)
				list.add(success);

			return list.hashCode();
		}

		public int compareTo(update_address_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		public String toString() {
			StringBuilder sb = new StringBuilder("update_address_result(");
			boolean first = true;

			sb.append("success:");
			sb.append(this.success);
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java
				// serialization is wacky, and doesn't call the default
				// constructor.
				__isset_bitfield = 0;
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class update_address_resultStandardSchemeFactory implements SchemeFactory {
			public update_address_resultStandardScheme getScheme() {
				return new update_address_resultStandardScheme();
			}
		}

		private static class update_address_resultStandardScheme extends StandardScheme<update_address_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, update_address_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.success = iprot.readI32();
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, update_address_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.isSetSuccess()) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					oprot.writeI32(struct.success);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class update_address_resultTupleSchemeFactory implements SchemeFactory {
			public update_address_resultTupleScheme getScheme() {
				return new update_address_resultTupleScheme();
			}
		}

		private static class update_address_resultTupleScheme extends TupleScheme<update_address_result> {

			public void write(org.apache.thrift.protocol.TProtocol prot, update_address_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					oprot.writeI32(struct.success);
				}
			}

			public void read(org.apache.thrift.protocol.TProtocol prot, update_address_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = iprot.readI32();
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

}
